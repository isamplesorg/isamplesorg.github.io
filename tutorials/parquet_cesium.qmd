---
title: Using Cesium for geospatial visualization of remote parquet data
categories: [parquet, spatial, recipe]
---

One key development of the iSamples project centers on the demonstration of low-cost, simplified, and more sustainable approaches to access, analyze and visualize scientific data. Rather than relying upon elaborate and costly server-side infrastructure, iSamples demonstrates how open source technologies like parquet and DuckDB-WASM can streamline cheaper and faster approaches to interacting with geospatial data.

This page demonstrates how geospatial data can be dynamically accessed from a remote parquet file in cloud storage. The page uses Cesium for browser visualization of these spatial data on a 3D global map. The data in this demonstration comes from [Open Context's](https://opencontext.org/) export of specimen (archaeological artifact and ecofact) records for iSamples. However, this demonstration can also work with any other iSamples compliant parquet data source made publicly accessible on the Web.


<script src="https://cesium.com/downloads/cesiumjs/releases/1.127/Build/Cesium/Cesium.js"></script>
<link href="https://cesium.com/downloads/cesiumjs/releases/1.127/Build/Cesium/Widgets/widgets.css" rel="stylesheet"></link>
<style>
    div.cesium-topleft {
        display: block;
        position: absolute;
        background: #00000099;
        color: white;
        height: auto;
        z-index: 999;        
    }
    #cesiumContainer {
        aspect-ratio: 1/1;
    }
    #sampleDetails {
        margin-top: 1.5rem;
    }
    #sampleDetails .sample-grid {
        display: grid;
        gap: 1rem;
    }
    @media (min-width: 768px) {
        #sampleDetails .sample-grid {
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        }
    }
    #sampleDetails .sample-card {
        border: 1px solid #d9d9d9;
        border-radius: 0.5rem;
        padding: 0.75rem;
        background: #fafafa;
    }
    #sampleDetails .sample-card h3 {
        margin-top: 0;
        font-size: 1.05rem;
    }
    #sampleDetails .sample-card img {
        max-width: 140px;
        border-radius: 0.25rem;
        display: block;
        margin-top: 0.5rem;
    }
</style>

```{ojs}
//| output: false
Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwNzk3NjkyMy1iNGI1LTRkN2UtODRiMy04OTYwYWE0N2M3ZTkiLCJpZCI6Njk1MTcsImlhdCI6MTYzMzU0MTQ3N30.e70dpNzOCDRLDGxRguQCC-tRzGzA-23Xgno5lNgCeB4';
```

```{ojs}
//| echo: false
viewof parquet_path = Inputs.text({label:"Source", value:"https://storage.googleapis.com/opencontext-parquet/oc_isamples_pqg.parquet", width:"100%", submit:true});
```

```{ojs}
//| code-fold: true

// Create a DuckDB instance
db = {
  const instance = await DuckDBClient.of();
  await instance.query(`create view nodes as select * from read_parquet('${parquet_path}')`)
  return instance;
}


async function loadData(query, params=[], waiting_id=null) {
    // Get loading indicator
    const waiter = document.getElementById(waiting_id);
    if (waiter) {
        waiter.hidden = false;
    }
    try {
        // Run the (slow) query
        const _results = await db.query(query, ...params);
        return _results;
    } catch (error) {
        if (waiter) {
            waiter.innerHtml = `<pre>${error}</pre>`;
        }
        return null;
    } finally {
        // Hide the waiter (if there is one)
        if (waiter) {
            waiter.hidden = true;
        }
    }
}

locations = {
    // get the content form the parquet file
    const query = `SELECT pid, latitude, longitude FROM nodes WHERE otype='GeospatialCoordLocation'`;
    const data = await loadData(query, [], "loading_1");

    // Clear the existing PointPrimitiveCollection
    content.points.removeAll();
    //content.points = new Cesium.PointPrimitiveCollection();

    // create point primitives for cesium display
    const scalar = new Cesium.NearFarScalar(1.5e2, 2, 8.0e6, 0.2);
    const color = Cesium.Color.PINK;
    const point_size = 4;
    for (const row of data) {
        content.points.add({
            id: row.pid,
            // https://cesium.com/learn/cesiumjs/ref-doc/Cartesian3.html#.fromDegrees
            position: Cesium.Cartesian3.fromDegrees(
                row.longitude,  //longitude
                row.latitude,   //latitude
                0,//randomCoordinateJitter(10.0, 10.0), //elevation, m
            ),
            pixelSize: point_size,
            color: color,
            scaleByDistance: scalar,
        });
    }
    content.enableTracking();
    return data;
}


function createShowPrimitive(viewer) {
    return function(movement) {
        // Get the point at the mouse end position
        const selectPoint = viewer.viewer.scene.pick(movement.endPosition);        

        // Clear the current selection, if there is one and it is different to the selectPoint
        if (viewer.currentSelection !== null) {
            //console.log(`selected.p ${viewer.currentSelection}`)
            if (Cesium.defined(selectPoint) && selectPoint !== viewer.currentSelection) {
                console.log(`selected.p 2 ${viewer.currentSelection}`)
                viewer.currentSelection.primitive.pixelSize = 4;
                viewer.currentSelection.primitive.outlineColor = Cesium.Color.TRANSPARENT;
                viewer.currentSelection.outlineWidth = 0;
                viewer.currentSelection = null;
            }
        }

        // If selectPoint is valid and no currently selected point
        if (Cesium.defined(selectPoint) && selectPoint.hasOwnProperty("primitive")) {
            //console.log(`showPrimitiveId ${selectPoint.id}`);
            //const carto = Cesium.Cartographic.fromCartesian(selectPoint.primitive.position)
            viewer.pointLabel.position = selectPoint.primitive.position;
            viewer.pointLabel.label.show = true;
            //viewer.pointLabel.label.text = `id:${selectPoint.id}, ${carto}`;
            viewer.pointLabel.label.text = `${selectPoint.id}`;
            selectPoint.primitive.pixelSize = 20;
            selectPoint.primitive.outlineColor = Cesium.Color.YELLOW;
            selectPoint.primitive.outlineWidth = 3;
            viewer.currentSelection = selectPoint;
        } else {
            viewer.pointLabel.label.show = false;
        }            
    }
}

class CView {
    constructor(target) {
        this.viewer = new Cesium.Viewer(
            target, {
                timeline: false,
                animation: false,
                baseLayerPicker: false,
                fullscreenElement: target,
                terrain: Cesium.Terrain.fromWorldTerrain()
            });
        this.currentSelection = null;
        this.point_size = 1;
        this.n_points = 0;
        // https://cesium.com/learn/cesiumjs/ref-doc/PointPrimitiveCollection.html
        this.points = new Cesium.PointPrimitiveCollection();
        this.viewer.scene.primitives.add(this.points);
     
        this.pointLabel = this.viewer.entities.add({
            label: {
            show: false,
            showBackground: true,
            font: "14px monospace",
            horizontalOrigin: Cesium.HorizontalOrigin.LEFT,
            verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
            pixelOffset: new Cesium.Cartesian2(15, 0),
            // this attribute will prevent this entity clipped by the terrain
            disableDepthTestDistance: Number.POSITIVE_INFINITY,
            text:"",
            },
        });

        this.pickHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);
        // Can also do this rather than wait for the points to be generated
        //this.pickHandler.setInputAction(createShowPrimitive(this), Cesium.ScreenSpaceEventType.MOUSE_MOVE);

        this.selectHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);
        this.selectHandler.setInputAction((e) => {
            const selectPoint = this.viewer.scene.pick(e.position);
            if (Cesium.defined(selectPoint) && selectPoint.hasOwnProperty("primitive")) {
                console.log("Clicked point ID:", selectPoint.id);
                // Store the clicked ID in the viewer instance for now
                this.clickedId = selectPoint.id;
                // Dispatch a custom event that can be picked up by Observable
                document.dispatchEvent(new CustomEvent('pointSelected', {
                    detail: { pointId: selectPoint.id }
                }));
            }
        },Cesium.ScreenSpaceEventType.LEFT_CLICK);

    }

    enableTracking() {
        this.pickHandler.setInputAction(createShowPrimitive(this), Cesium.ScreenSpaceEventType.MOUSE_MOVE);
    }
}

content = new CView("cesiumContainer");

async function getGeoRecord(pid) {
    if (pid === null || pid ==="" || pid == "unset") {
        return "unset";
    }
    const q = `SELECT row_id, pid, otype, latitude, longitude FROM nodes WHERE otype='GeospatialCoordLocation' AND pid=?`;
    const result = await db.queryRow(q, [pid]);
    return result;
}

async function samplesAtLocation(rowid) {
    if (rowid === undefined || rowid === null) {
        return [];
    }
    const query = `
        WITH edges AS (
            SELECT s, p, unnest(o) AS o1
            FROM nodes
            WHERE otype = '_edge_'
        ), events AS (
            SELECT s AS event_row_id
            FROM edges
            WHERE p = 'sample_location' AND o1 = ?
        ), sample_links AS (
            SELECT s AS sample_row_id, o1 AS event_row_id
            FROM edges
            WHERE p = 'produced_by' AND o1 IN (SELECT event_row_id FROM events)
        ), sample_nodes AS (
            SELECT row_id, pid, label, description, thumbnail_url, alternate_identifiers
            FROM nodes
            WHERE row_id IN (SELECT sample_row_id FROM sample_links)
        ), event_nodes AS (
            SELECT row_id, label, project
            FROM nodes
            WHERE row_id IN (SELECT event_row_id FROM events)
        ), concept_edges AS (
            SELECT s, p, o1
            FROM edges
            WHERE s IN (SELECT row_id FROM sample_nodes)
              AND p IN ('has_sample_object_type','has_material_category','has_context_category','keywords')
        ), concept_labels AS (
            SELECT row_id, label
            FROM nodes
            WHERE row_id IN (SELECT o1 FROM concept_edges)
        ), keyword_text AS (
            SELECT ce.s, string_agg(DISTINCT cl.label, ', ') AS keywords
            FROM concept_edges ce
            JOIN concept_labels cl ON ce.o1 = cl.row_id
            WHERE ce.p = 'keywords'
            GROUP BY ce.s
        ), sampling_sites AS (
            SELECT s AS event_row_id, o1 AS site_row_id
            FROM edges
            WHERE p = 'sampling_site' AND s IN (SELECT event_row_id FROM events)
        ), site_nodes AS (
            SELECT row_id, label
            FROM nodes
            WHERE row_id IN (SELECT site_row_id FROM sampling_sites)
        )
        SELECT
            sn.pid,
            sn.label,
            sn.description,
            sn.thumbnail_url,
            MAX(CASE WHEN ce.p = 'has_sample_object_type' THEN cl.label END) AS sample_object_type,
            MAX(CASE WHEN ce.p = 'has_material_category' THEN cl.label END) AS material_category,
            MAX(CASE WHEN ce.p = 'has_context_category' THEN cl.label END) AS context_category,
            kt.keywords,
            en.project,
            en.label AS event_label,
            snl.label AS site_label
        FROM sample_nodes sn
        LEFT JOIN sample_links sl ON sn.row_id = sl.sample_row_id
        LEFT JOIN event_nodes en ON sl.event_row_id = en.row_id
        LEFT JOIN concept_edges ce ON sn.row_id = ce.s
        LEFT JOIN concept_labels cl ON ce.o1 = cl.row_id
        LEFT JOIN keyword_text kt ON sn.row_id = kt.s
        LEFT JOIN sampling_sites ss ON sl.event_row_id = ss.event_row_id
        LEFT JOIN site_nodes snl ON ss.site_row_id = snl.row_id
        GROUP BY sn.pid, sn.label, sn.description, sn.thumbnail_url, kt.keywords, en.project, en.label, snl.label
        ORDER BY sn.label
        LIMIT 6;
    `;
    const result = await db.query(query, [rowid]);
    const rows = result?.toArray ? result.toArray() : result;
    return Array.isArray(rows) ? rows : [];
}

// Use a viewof pattern to create a reactive clickedPointId
viewof clickedPointId = {
  const input = html`<input type="hidden" value="unset">`;

  // Listen for point selection events and update the input value
  document.addEventListener('pointSelected', (event) => {
    input.value = event.detail.pointId;
    input.dispatchEvent(new Event('input'));
  });

  return input;
}

// Access the current value
clickedPointId;

selectedGeoRecord = {
  // This will re-execute whenever clickedPointId changes
  const result = await getGeoRecord(clickedPointId);
  return result;
}

selectedSamples = {
  // This will re-execute whenever selectedGeoRecord changes
  if (selectedGeoRecord?.row_id) {
    const samples = await samplesAtLocation(selectedGeoRecord.row_id);
    return samples;
  }
  return [];
}

md`Retrieved ${pointdata.length} locations from ${parquet_path}.`;
```

::: {.panel-tabset}

## Map

<div id="cesiumContainer"></div>

## Data

<div id="loading_1">Loading...</div>

```{ojs}
//| code-fold: true

viewof pointdata = {
    const data_table = Inputs.table(locations, {
        header: {
            row_id:"Row ID",
            pid: "PID",
            latitude: "Latitude",
            longitude: "Longitude"
        },
    });
    return data_table;
}    
```

:::

```{ojs}
//| echo: false
// Enhanced UI with sample information
html`<section id="sampleDetails">
  <h2>Selected Location</h2>
  ${clickedPointId === "unset" ?
    html`<p>Click a point on the map to view nearby sample records.</p>` :
    html`${(() => {
      const locationPid = selectedGeoRecord?.pid || clickedPointId;
      const resolver = locationPid?.startsWith('http') ? locationPid : `https://n2t.net/${encodeURIComponent(locationPid)}`;
      const lat = selectedGeoRecord?.latitude != null ? selectedGeoRecord.latitude.toFixed(4) : 'N/A';
      const lon = selectedGeoRecord?.longitude != null ? selectedGeoRecord.longitude.toFixed(4) : 'N/A';
      const samples = Array.isArray(selectedSamples) ? selectedSamples : [];
      return html`<div>
        <p><strong>Point PID:</strong> <a href="${resolver}" target="_blank" rel="noopener">${locationPid}</a></p>
        <p><strong>Coordinates:</strong> ${lat}, ${lon}</p>
        <p><strong>Sample records found:</strong> ${samples.length}</p>
        ${samples.length
          ? html`<div class="sample-grid">
              ${samples.map(sample => {
                const displayLabel = sample.label || sample.pid;
                const sampleLink = sample.pid?.startsWith('http') ? sample.pid : `https://n2t.net/${encodeURIComponent(sample.pid)}`;
                const typeParts = [sample.sample_object_type, sample.material_category].filter(Boolean);
                const collectionParts = [sample.project, sample.site_label, sample.event_label].filter(Boolean);
                const context = sample.context_category;
                const keywords = typeof sample.keywords === 'string'
                  ? sample.keywords.split(', ').filter(Boolean)
                  : Array.isArray(sample.keywords)
                    ? sample.keywords.filter(Boolean)
                    : [];
                return html`<article class="sample-card">
                  <h3><a href="${sampleLink}" target="_blank" rel="noopener">${displayLabel}</a></h3>
                  ${sample.description ? html`<p>${sample.description}</p>` : null}
                  ${typeParts.length ? html`<p><strong>Type</strong>: ${typeParts.join(' · ')}</p>` : null}
                  ${context ? html`<p><strong>Context</strong>: ${context}</p>` : null}
                  ${collectionParts.length ? html`<p><strong>Collection</strong>: ${collectionParts.join(' · ')}</p>` : null}
                  ${keywords.length ? html`<p><strong>Keywords</strong>: ${keywords.join(', ')}</p>` : null}
                  ${sample.thumbnail_url ? html`<img src="${sample.thumbnail_url}" alt="Thumbnail for ${displayLabel}" loading="lazy">` : null}
                </article>`;
              })}
            </div>`
          : html`<p><em>No sample records were linked to this location.</em></p>`}
      </div>`;
    })()}`
  }
</section>`
```
